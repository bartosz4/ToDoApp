{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","_this","handleClick","_this$state","length","props","add","setState","alert","handleText","e","target","value","handleCheckbox","handleDate","maxDate","this","react_default","a","createElement","className","type","placeholder","onChange","id","htmlFor","min","max","onClick","Component","Task","_props$task","task","active","important","finishDate","style","color","change","delete","finish","toLocaleString","TaskList","tasks","filter","done","sort","b","activeTasks","map","components_Task","key","doneTasks","App","counter","addTask","prevState","concat","Object","toConsumableArray","deleteTask","index","findIndex","splice","changeTaskStatus","forEach","getTime","src_components_AddTask","components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dac9da89.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport './AddTask.css'\r\n\r\nclass AddTask extends Component {\r\n\r\n  minDate = new Date().toISOString().slice(0, 10);\r\n  state = {\r\n    text: '',\r\n    checked: false,\r\n    date: this.minDate\r\n  };\r\n\r\n  handleClick = () => {\r\n    const {text, checked, date} = this.state;\r\n    if(text.length > 3) {\r\n      const add = this.props.add(text, date, checked);\r\n      if(add){\r\n        this.setState({\r\n          text: '',\r\n          checked: false,\r\n          date: this.minDate\r\n        })\r\n      }\r\n    } else{\r\n      alert('opisz zadanie')\r\n    }\r\n  };\r\n\r\n  handleText = (e) => {\r\n    this.setState({\r\n      text: e.target.value\r\n    })\r\n  };\r\n\r\n  handleCheckbox = (e) => {\r\n    this.setState({\r\n      checked: e.target.checked\r\n    })\r\n  };\r\n\r\n  handleDate = (e) => {\r\n    this.setState({\r\n      date: e.target.value\r\n    })\r\n  };\r\n\r\n  render() {\r\n\r\n    let maxDate = this.minDate.slice(0, 4) * 1 + 1;\r\n    maxDate = maxDate + '-12-31';\r\n\r\n    return (\r\n      <div className='form'>\r\n        <input type=\"text\" placeholder=\"dodaj zadanie\" value={this.state.text} onChange={this.handleText}/>\r\n        <input type=\"checkbox\" checked={this.state.checked} id = 'important' onChange={this.handleCheckbox}/>\r\n        <label htmlFor=\"important\" >Ważne !</label><br/>\r\n        <label htmlFor=\"date\">Do kiedy zrobić </label>\r\n        <input type=\"date\" value={this.state.date} min = {this.minDate} max = {maxDate} onChange={this.handleDate}/>\r\n        <button className='add' onClick={this.handleClick}><strong>Dodaj</strong></button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AddTask;\r\n","import React from 'react';\r\n\r\nconst Task = (props) => {\r\n\r\n  const style = { color: '#06B995'};\r\n\r\n  const {text, date, id, active, important, finishDate} = props.task;\r\n\r\n  if(active){\r\n    return (\r\n      <div>\r\n        <p>\r\n          <strong style = {important ? style : null}>{text}</strong> do <span>{date} </span>\r\n          <button className='button' onClick={() => props.change(id)}>Zrobione!</button>\r\n          <button className='button' onClick={() => props.delete(id)}>Usuń</button>\r\n        </p>\r\n      </div>\r\n    );\r\n  } else {\r\n    const finish = new Date(finishDate).toLocaleString();\r\n    return (\r\n      <div>\r\n        <p>\r\n          <strong>{text}</strong><em> (zrobić do {date}) </em><br/>\r\n          - wykonano <span>{finish}</span>\r\n          <button className='button' onClick={() => props.delete(id)}>Usuń</button>\r\n        </p>\r\n     </div>\r\n    )\r\n  }\r\n};\r\n\r\nexport default Task;","import React from 'react';\r\nimport Task from './Task';\r\n\r\nconst TaskList = (props) => {\r\n\r\n  const active = props.tasks.filter(task => task.active);\r\n  const done = props.tasks.filter(task => !task.active);\r\n\r\n  active.sort((a,b) => {\r\n    if(a.date > b.date){\r\n      return 1\r\n    }\r\n    if(a.date < b.date){\r\n      return -1\r\n    }\r\n    return 0\r\n  });\r\n\r\n  done.sort((a,b) => b.finishDate - a.finishDate);\r\n\r\n  const activeTasks = active.map(task =>\r\n    <Task key = {task.id}\r\n          task = {task}\r\n          delete = {props.delete}\r\n          change = {props.change}/>);\r\n\r\n  const doneTasks = done.map(task =>\r\n    <Task key = {task.id}\r\n          task = {task}\r\n          delete = {props.delete}\r\n          change = {props.change}/>);\r\n\r\n  return (\r\n    <div className='task-list'>\r\n     <div className=\"active\">\r\n        <h1>Lista zadań do zrobienia</h1>\r\n       {activeTasks.length > 0 ? activeTasks : <p>\"Wszystko zrobione!\"</p>}\r\n      </div>\r\n      <div className=\"done\">\r\n        <h3>Zadania zakończone <em>({done.length})</em> </h3>\r\n        {doneTasks}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskList;","import React, {Component} from 'react';\nimport AddTask from './AddTask'\nimport TaskList from './TaskList';\nimport './App.css';\n\nclass App extends Component {\n\n  counter = 4;\n  state ={\n    tasks: [\n      {\n        id: 0,\n        text: 'zrobic aplikacje ToDo',\n        date: '2019-05-09',\n        important: true,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 1,\n        text: 'zrobić porządek w szafie',\n        date: '2019-05-11',\n        important: false,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 2,\n        text: 'posprzątać piwnice',\n        date: '2019-05-31',\n        important: false,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 3,\n        text: 'znależć miejsce na wakacje',\n        date: '2019-06-31',\n        important: true,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 4,\n        text: 'pojechać w góry',\n        date: '2019-08-31',\n        important: true,\n        active: true,\n        finishDate: null,\n      }\n    ]\n  };\n\n  addTask = (text, date, important) => {\n    const task = {\n      id: this.counter,\n      text: text,\n      date: date,\n      important: important,\n      active: true,\n      finishDate: null,\n    };\n    this.counter++;\n\n    this.setState(prevState => ({\n      tasks: [...prevState.tasks, task]\n    }));\n\n    return true\n  };\n\n  deleteTask = (id) => {\n\n    const tasks = [...this.state.tasks];\n    const index = tasks.findIndex(task => task.id === id);\n    tasks.splice(index,1);\n\n    this.setState({\n      tasks: tasks\n    })\n  };\n\n  changeTaskStatus = (id) => {\n\n    const tasks = [...this.state.tasks];\n    tasks.forEach(task => {\n      if(task.id === id){\n        task.active = false;\n        task.finishDate = new Date().getTime()\n      }\n    });\n\n    this.setState({\n      tasks: tasks\n    })\n  };\n\n  render () {\n    return (\n      <div className=\"App\">\n        <h1>APLIKACJA To-Do</h1>\n        <AddTask add = {this.addTask}/>\n        <TaskList\n          tasks = {this.state.tasks}\n          delete={this.deleteTask}\n          change = {this.changeTaskStatus}\n        />\n      </div>)\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}